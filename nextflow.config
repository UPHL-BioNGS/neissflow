// Manifest

manifest {
    name = 'neissflow/main.nf'
    description = 'neissflow'
    version = '2.0.0'
    author = 'Kat Morin'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.10.0'
    doi             = ''
}

params {

  // Config options
  config_profile_name        = null
  config_profile_description = null
  config_profile_contact     = 'xqc3@cdc.gov'
  config_profile_url         = null
  
  // set defaults
  mash_db                    = "RefSeqSketchesDefaults.msh" 
  reference_genome           = null
  FA19_ref                   = "${projectDir}/assets/FA19.gb"
  FA19cg                     = "${projectDir}/assets/FA19cg.fa"
  amr_ref                    = "${projectDir}/assets/amr_genes.gbk"
  loci                       = "${projectDir}/assets/FA19_loci.tsv"
  penAdb                     = "${projectDir}/assets/blastdb/penAdb"   
  porBdb                     = "${projectDir}/assets/blastdb/porBdb"
  mtrR_mosaic_ref            = "${projectDir}/assets/gene_refs/mosaic-mtrR.fasta"
  default_amr                = "${projectDir}/assets/AMR_defaults.tsv"
  columns                    = "${projectDir}/assets/amr_columns.txt"
  ngmasterdb                 = "${projectDir}/assets/alleledb/ngmaster/"
  ngstar                     = "${projectDir}/assets/alleledb/ngmaster/pubmlst/ngstar/ngstar.txt"
  ngmast                     = "${projectDir}/assets/alleledb/ngmaster/pubmlst/ngmast/ngmast.txt"
  pubmlst                    = "mlst/pubmlst/"
  blastdb                    = "mlst/blastdb/mlst.fa"
  ngmasterdb_version         = "01/2025"
  snp_dist                   = 20
  depth                      = 150
  max_itr                    = 25
  controls                   = null
  QC                         = false
  name                       = "complete"

  // MultiQC options
  multiqc_config             = null
  multiqc_title              = null
  multiqc_logo               = null
  max_multiqc_email_size     = '25.MB'
  multiqc_methods_description = null

  //Boilerplate options
  help                         = false
  input                        = null
  outdir                       = null
  publish_dir_mode             = 'copy'
  version                      = 2.0
  monochrome_logs              = false
  monochromeLogs               = false
  email                        = null
  email_on_fail                = null
  plaintext_email              = false
  hook_url                     = null

  //Other
  only_fastq                   = false
  only_fasta                   = false
  fastq_w_fasta                = false
  skip_fastq_check             = false
  skip_preprocess              = false
  skip_assembly                = false
  skip_assembly_qc             = false
  skip_species_id              = false
  skip_amr                     = false
  skip_phylogeny               = false
  remove_ref                   = false
  validate_params              = false
  validationSkipDuplicateCheck = true
  validationS3PathCheck        = false
  downsample                   = false


  
  // Max resource options
  max_memory                 = '256.GB'
  max_cpus                   = 16
  max_time                   = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

/*
========================================================================================
    Nextflow Metrics & Reports
========================================================================================
*/

timeline {
  enabled = true
  file    = "${params.outdir}/timeline.html"
}

report {
  enabled = true
  file    = "${params.outdir}/report.html"
}

trace {
  enabled = true
  fields  = 'task_id,name,status,exit,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar'
  file    = "${params.outdir}/trace.txt"
}

/*
========================================================================================
    Base Executor config
========================================================================================
*/

executor {
  queueSize = 2
}

/*
========================================================================================
    Profiles - all,short,gpu,highmem,singularity,test,test_both,test_fasta,QC
========================================================================================
*/

profiles {

  all {
    process {
      executor     = 'sge'
      penv         = 'smp'
      queue        = 'all.q'
    }
    executor {
      queueSize    = 12
      pollInterval = '15 sec'
    }
  }
  short {
    process {
      executor     = 'sge'
      penv         = 'smp'
      queue        = 'short.q'
    }
    executor {
      queueSize    = 12
      pollInterval = '15 sec'
    }
  }

  highmem {
    process {
      executor     = 'sge'
      penv         = 'smp'
      queue        = 'highmem.q'
    }
    executor {
      queueSize    = 12
      pollInterval = '15 sec'
    }
  }

  singularity {
    singularity.enabled     = true
    singularity.autoMounts  = true
    conda.enabled           = false
    docker.enabled          = false
    podman.enabled          = false
    shifter.enabled         = false
    charliecloud.enabled    = false
    apptainer.enabled       = false
  }
 docker {
    docker.enabled         = true
    conda.enabled          = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    apptainer.enabled      = false
    docker.runOptions      = '-u $(id -u):$(id -g)'
  }
  test {
    includeConfig 'conf/test.config'
  }

  test_both {
    includeConfig 'conf/test_both.config'
  }

  test_fasta {
    includeConfig 'conf/test_fasta.config'
  }

  QC {
    includeConfig 'conf/QC.config'
  }

  debug {
    dumpHashes              = true
    process.beforeScript    = 'echo $HOSTNAME'
    cleanup                 = false
    nextflow.enable.configProcessNamesValidation = true
  }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
